@if(scorecard != null && scats != null)
{
    <MudSimpleTable class="mb-3" Dense="@true" Bordered="@true" Outlined="@true">
        <thead>
            <tr>
                <th class="tableheader" colspan="22">@ScatsHeader()</th>
            </tr>
        </thead>
        <tbody>
            <tr class="scorecardholes">
                <td class="scorecardheader" colspan="2">Hole</td>
                <td>1</td>
                <td>2</td>
                <td>3</td>
                <td>4</td>
                <td>5</td>
                <td>6</td>
                <td>7</td>
                <td>8</td>
                <td>9</td>
                <td>10</td>
                <td>11</td>
                <td>12</td>
                <td>13</td>
                <td>14</td>
                <td>15</td>
                <td>16</td>
                <td>17</td>
                <td>18</td>
                <td></td>
                <td></td>
            </tr>
            <tr class="scorecardhcps">
                <td class="scorecardheader" colspan="2">Hcp</td>
                <td>@scorecard.Hcp1</td>
                <td>@scorecard.Hcp2</td>
                <td>@scorecard.Hcp3</td>
                <td>@scorecard.Hcp4</td>
                <td>@scorecard.Hcp5</td>
                <td>@scorecard.Hcp6</td>
                <td>@scorecard.Hcp7</td>
                <td>@scorecard.Hcp8</td>
                <td>@scorecard.Hcp9</td>
                <td>@scorecard.Hcp10</td>
                <td>@scorecard.Hcp11</td>
                <td>@scorecard.Hcp12</td>
                <td>@scorecard.Hcp13</td>
                <td>@scorecard.Hcp14</td>
                <td>@scorecard.Hcp15</td>
                <td>@scorecard.Hcp16</td>
                <td>@scorecard.Hcp17</td>
                <td>@scorecard.Hcp18</td>
                <td></td>
                <td></td>
            </tr>
            <tr class="scorecardpars">
                <td class="scorecardheader" colspan="2">Par</td>
                <td>@scorecard.Par1</td>
                <td>@scorecard.Par2</td>
                <td>@scorecard.Par3</td>
                <td>@scorecard.Par4</td>
                <td>@scorecard.Par5</td>
                <td>@scorecard.Par6</td>
                <td>@scorecard.Par7</td>
                <td>@scorecard.Par8</td>
                <td>@scorecard.Par9</td>
                <td>@scorecard.Par10</td>
                <td>@scorecard.Par11</td>
                <td>@scorecard.Par12</td>
                <td>@scorecard.Par13</td>
                <td>@scorecard.Par14</td>
                <td>@scorecard.Par15</td>
                <td>@scorecard.Par16</td>
                <td>@scorecard.Par17</td>
                <td>@scorecard.Par18</td>
                <td>#</td>
                <td>$</td>
           </tr>
            @{
                index = 1;
            }
            @foreach(var scat in scats.OrderBy(x => x.TeeSlot))
            {
                <tr class="scorecardscores">
                    <td class ="scorecardplayername">@scat.Name</td>
                    <td class="scorecardplayerhcp">@scat.Hcp</td>
                    <td class="@ScatClass(1, index)">@Utilities.DisplayGross(scat.Hole1)</td>
                    <td class="@ScatClass(2, index)">@Utilities.DisplayGross(scat.Hole2)</td>
                    <td class="@ScatClass(3, index)">@Utilities.DisplayGross(scat.Hole3)</td>
                    <td class="@ScatClass(4, index)">@Utilities.DisplayGross(scat.Hole4)</td>
                    <td class="@ScatClass(5, index)">@Utilities.DisplayGross(scat.Hole5)</td>
                    <td class="@ScatClass(6, index)">@Utilities.DisplayGross(scat.Hole6)</td>
                    <td class="@ScatClass(7, index)">@Utilities.DisplayGross(scat.Hole7)</td>
                    <td class="@ScatClass(8, index)">@Utilities.DisplayGross(scat.Hole8)</td>
                    <td class="@ScatClass(9, index)">@Utilities.DisplayGross(scat.Hole9)</td>
                    <td class="@ScatClass(10, index)">@Utilities.DisplayGross(scat.Hole10)</td>
                    <td class="@ScatClass(11, index)">@Utilities.DisplayGross(scat.Hole11)</td>
                    <td class="@ScatClass(12, index)">@Utilities.DisplayGross(scat.Hole12)</td>
                    <td class="@ScatClass(13, index)">@Utilities.DisplayGross(scat.Hole13)</td>
                    <td class="@ScatClass(14, index)">@Utilities.DisplayGross(scat.Hole14)</td>
                    <td class="@ScatClass(15, index)">@Utilities.DisplayGross(scat.Hole15)</td>
                    <td class="@ScatClass(16, index)">@Utilities.DisplayGross(scat.Hole16)</td>
                    <td class="@ScatClass(17, index)">@Utilities.DisplayGross(scat.Hole17)</td>
                    <td class="@ScatClass(18, index)">@Utilities.DisplayGross(scat.Hole18)</td>
                    <td>@scat.Count</td>
                    <td>@Utilities.DisplayWinnings(scat.Winnings)</td>
                </tr>

                index++;
            }
        </tbody>
    </MudSimpleTable>
}
else
{
    <ResultsNotPosted />
}

@code {
    [Parameter] public string title { get; set; } = string.Empty;
    [Parameter] public string round { get; set; } = string.Empty;
    [Parameter] public Scorecard? scorecard { get; set; }
    [Parameter] public IList<DailyScatsEntry>? scats { get; set; }
    [Parameter] public DailyScatStats? scatStats { get; set; }

    private int index = 0;

    private string ScatClass(int holeNum, int index)
    {
        var holeInfo = scatStats?.Holes?.FirstOrDefault(h => h.HoleNumber == holeNum);

        return holeInfo != null && holeInfo.LowIndex == index ? "scatWinner" : "";
    }

    
    private string ScatsHeader()
    {
        if (scatStats is null)
            return title;

        return $"{title} ({ScatTypeDesc}) - Scats Won {scatStats?.ScatsWon} - Payout Per Scat {Utilities.DisplayWinnings(scatStats?.ScatPayout)}";
    }

    private string ScatTypeDesc => scatStats?.ScatType switch
    {
        0 => "Gross",
        1 => "Net",
        2 => "Half Net",
        _ => ""
    };

    private string ScoreClass(int score, int par) => (score - par) switch
    {
        >= 3 => "maxi",
        2 => "double",
        1 => "bogey",
        0 => "par",
        -1 => "birdie",
        -2 => "eagle",
        <= -3 => "unknown"
    };

}