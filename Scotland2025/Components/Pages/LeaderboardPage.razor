@page "/leaderboard"

<PageTitle>Leaderboard</PageTitle>

@if (leaderboard == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div class="mt-5"></div>
    <MudSimpleTable Class="@TableClass" Dense="@true" Bordered="@true">
        <thead>
            <tr>
                <th class="tableheader" colspan="@(expanded ? "20" : "10")" @onclick="(_ => expanded = !expanded)">
                    Individual Championship Leaderboard
                    <MudIcon Icon="@ExpansionIcon" Size="Size.Medium" />
                </th>
            </tr>

            @if(expanded)
            {
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th colspan="3">Round 1</th>
                    <th colspan="3">Round 2</th>
                    <th colspan="3">Round 3</th>
                    <th colspan="3">Round 4</th>
                    <th colspan="3">Round 5</th>
                    <th></th>
                </tr>
            }
            <tr>
                <th class="posCol">Pos</th>
                <th class="nameCol">Name</th>
                <th class="hcpCol">Hcp</th>
                <th class="grossCol">Total</th>
                @if (expanded)
                {
                    <th>Hcp</th>
                    <th>Gross</th>
                    <th class="netCol">Net</th>
                    <th>Hcp</th>
                    <th>Gross</th>
                    <th class="netCol">Net</th>
                    <th>Hcp</th>
                    <th>Gross</th>
                    <th class="netCol">Net</th>
                    <th>Hcp</th>
                    <th>Gross</th>
                    <th class="netCol">Net</th>
                    <th>Hcp</th>
                    <th>Gross</th>
                    <th class="netCol">Net</th>
                }
                else
                {
                    <th class="netCol">R1</th>
                    <th class="netCol">R2</th>
                    <th class="netCol">R3</th>
                    <th class="netCol">R4</th>
                    <th class="netCol">R5</th>
                }
                <th class="moneyCol">$</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in leaderboard.Entries.OrderBy(e => e.Pos))
            {
                <tr>
                    <td class="posCol">@Utilities.DisplayPos(entry.Pos)</td>
                    <td class="nameCol">@entry.Name</td>
                    <td class="hcpCol">@entry.Hcp</td>
                    <td class="totalCol @Utilities.NetClass(entry.Total)">@(leaderboard.RoundsCompleted > 0 ? Utilities.DisplayNet(entry.Pos, entry.Total) : "")</td>
                    @if (expanded)
                    {
                        <td class="hcpCol @TeeAdjusted(entry.Hcp, entry.Round1Hcp, 1)">@entry.Round1Hcp</td>
                        <td class="grossCol">@(leaderboard.RoundsCompleted > 0 ? @Utilities.DisplayGross(entry.Round1Gross) : "")</td>
                        <td class="netCol @Utilities.NetClass(entry.Round1Net) @Drop(entry, 1)">@(leaderboard.RoundsCompleted > 0 ? Utilities.DisplayNet(entry.Pos, entry.Round1Net) : "")</td>
                        <td class="hcpCol @TeeAdjusted(entry.Hcp, entry.Round2Hcp, 2)">@(leaderboard.RoundsCompleted > 0 ? entry.Round2Hcp : "")</td>
                        <td class="grossCol">@(leaderboard.RoundsCompleted > 1 ? @Utilities.DisplayGross(entry.Round2Gross) : "")</td>
                        <td class="netCol @Utilities.NetClass(entry.Round2Net) @Drop(entry, 2)">@(leaderboard.RoundsCompleted > 1 ? Utilities.DisplayNet(entry.Pos, entry.Round2Net) : "")</td>
                        <td class="hcpCol @TeeAdjusted(entry.Hcp, entry.Round3Hcp, 3)">@(leaderboard.RoundsCompleted > 1 ? entry.Round3Hcp : "")</td>
                        <td class="grossCol">@(leaderboard.RoundsCompleted > 2 ? @Utilities.DisplayGross(entry.Round3Gross) : "")</td>
                        <td class="netCol @Utilities.NetClass(entry.Round3Net) @Drop(entry, 3)">@(leaderboard.RoundsCompleted > 2 ? Utilities.DisplayNet(entry.Pos, entry.Round3Net) : "")</td>
                        <td class="hcpCol @TeeAdjusted(entry.Hcp, entry.Round4Hcp, 4)">@(leaderboard.RoundsCompleted > 2 ? entry.Round4Hcp : "")</td>
                        <td class="grossCol">@(leaderboard.RoundsCompleted > 3 ? @Utilities.DisplayGross(entry.Round4Gross) : "")</td>
                        <td class="netCol @Utilities.NetClass(entry.Round4Net)">@(leaderboard.RoundsCompleted > 3 ? Utilities.DisplayNet(entry.Pos, entry.Round4Net) : "")</td>
                        <td class="hcpCol @TeeAdjusted(entry.Hcp, entry.Round5Hcp, 5)">@(leaderboard.RoundsCompleted > 3 ? entry.Round5Hcp : "")</td>
                        <td class="grossCol">@(leaderboard.RoundsCompleted > 4 ? @Utilities.DisplayGross(entry.Round5Gross) : "")</td>
                        <td class="netCol @Utilities.NetClass(entry.Round5Net)">@(leaderboard.RoundsCompleted > 4 ? Utilities.DisplayNet(entry.Pos, entry.Round5Net) : "")</td>
                    }
                    else
                    {
                        <td class="netCol @Utilities.NetClass(entry.Round1Net) @Drop(entry, 1)">@(leaderboard.RoundsCompleted > 0 ? Utilities.DisplayNet(entry.Pos, entry.Round1Net) : "")</td>
                        <td class="netCol @Utilities.NetClass(entry.Round2Net) @Drop(entry, 2)">@(leaderboard.RoundsCompleted > 1 ? Utilities.DisplayNet(entry.Pos, entry.Round2Net) : "")</td>
                        <td class="netCol @Utilities.NetClass(entry.Round3Net) @Drop(entry, 3)">@(leaderboard.RoundsCompleted > 2 ? Utilities.DisplayNet(entry.Pos, entry.Round3Net) : "")</td>
                        <td class="netCol @Utilities.NetClass(entry.Round4Net)">@(leaderboard.RoundsCompleted > 3 ? Utilities.DisplayNet(entry.Pos, entry.Round4Net) : "")</td>
                        <td class="netCol @Utilities.NetClass(entry.Round5Net)">@(leaderboard.RoundsCompleted > 4 ? Utilities.DisplayNet(entry.Pos, entry.Round5Net) : "")</td>
                    }
                    <td class="moneyCol">@Utilities.DisplayWinnings(entry.Winnings)</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@code {
        [Inject]
        public IJsonDocumentsDataService dataService { get; set; } = default!;

    private Leaderboard? leaderboard;

    private bool expanded = false;



    protected override async Task OnInitializedAsync()
    {
        leaderboard = await dataService.GetLeaderboardAsync();
    }

    private string TableClass => expanded ? "leaderboardExpanded" : "leaderboardCompressed";

    private string ExpansionIcon => expanded ? Icons.Material.Filled.KeyboardDoubleArrowLeft : Icons.Material.Filled.KeyboardDoubleArrowRight;

    private string Drop(LeaderboardEntry entry, int round)
    {
        if(leaderboard is null || leaderboard.RoundsCompleted < 3 || round > 3)
            return string.Empty;

        var droppedRound = GetDroppedRound(entry);
        return round == droppedRound ? "droppedScore" : string.Empty;
    }

    private string TeeAdjusted(double hcp, double roundHcp, int round)
    {
        if(leaderboard is null || leaderboard.RoundsCompleted < round-1)
            return string.Empty;

        return (hcp != roundHcp ? "teeAdjusted" : string.Empty);
    }

    private int GetDroppedRound(LeaderboardEntry entry)
    {
        if (leaderboard is null || leaderboard.RoundsCompleted < 3)
            return 0;

        var rounds = new List<double>
        {
            entry.Round1Net,
            entry.Round2Net,
            entry.Round3Net
        };

        var maxScore = rounds.Max();
        if(entry.Round1Net == maxScore)
            return 1;
        if(entry.Round2Net == maxScore)
            return 2;

        return 3;
    }

}
